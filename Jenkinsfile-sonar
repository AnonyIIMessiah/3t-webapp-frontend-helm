pipeline {
    agent any

    triggers {
        pollSCM('* * * * *')
    }
    environment {
        DOCKER_PASS = credentials('DOCKER_PASS')
        IMAGE_TAG = "${BUILD_NUMBER}"
        REACT_APP_API_URL = credentials('REACT_APP_API_URL')
        SONAR_TOKEN = credentials('SONAR_TOKEN')
        SONAR_PROJECT_KEY = "task-1_3t-webapp-frontend"
        SONAR_ORGANIZATION = "task-1"    
    }
    tools {
    'hudson.plugins.sonar.SonarRunnerInstallation' 'SonarScanner'
}
    stages {
        stage('Preparation') {
            steps {
                script {
                    // Clean workspace before starting
                    sh 'apt-get update && apt-get install -y docker.io'
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        // stage('Secret Scanning with GitLeaks') {
        // steps {
        //     script {
        //         sh '''
        //             echo ${WORKSPACE}
        //             cd ${WORKSPACE}/frontend
        //             ls
        //             docker run --rm \
        //             -v ${WORKSPACE}/frontend:/code \
        //             zricethezav/gitleaks:latest \
        //             detect --source="/code" \
        //             --report-path=/code/gitleaks-report.json \
        //             --report-format=json \
        //             --no-git
        //             ls -la
        //         '''
                
        //         // Optional: Archive the report as an artifact
        //         archiveArtifacts artifacts: 'gitleaks-report.json', allowEmptyArchive: true
                
        //         // Optional: Fail the build if secrets are found
        //         def exitCode = sh(script: 'cat gitleaks-report.json | grep -c "leak" || true', returnStdout: true).trim()
        //         if (exitCode != '0' && exitCode != '') {
        //             echo "GitLeaks found secrets in the codebase! Check the report for details."
        //             // Uncomment the line below to fail the build
        //             // error "Pipeline aborted due to leaked secrets"
        //                 }
        //             }
        //         }
        //     }

        stage('Secret Scan') {
            steps {
                script {
                    def gitleaksConfig = '--config .gitleaks.toml' // Optional: Specify a configuration file
                    def reportPath = 'gitleaks-report.json'

                    // Run gitleaks and generate a JSON report
                    def gitleaksCommand = "gitleaks $gitleaksConfig --report-path $reportPath --report-format json ."
                    try {
                        sh "${gitleaksCommand}"
                    } catch (Exception e) {
                        // Check if the exception was due to gitleaks finding secrets
                        if (e.getMessage().contains('Leaks found:')) {
                            error("Gitleaks found secrets! Check ${reportPath} for details.")
                            // Optionally, you could fail the build here
                            // currentBuild.result = 'FAILURE'
                        } else {
                            // Handle other potential errors
                            throw e
                        }
                    }

                    // Optionally, process the report (e.g., upload as an artifact)
                    archiveArtifacts "${reportPath}"
                }
            }
        }
        //  stage('SonarCloud Analysis') {
        //     steps {
        // withSonarQubeEnv('SonarCloud') {
        //     sh "${tool 'SonarScanner'}/bin/sonar-scanner \
        //       -Dsonar.projectKey=task-1_3t-webapp-frontend \
        //       -Dsonar.organization=task-1 \
        //       -Dsonar.host.url=https://sonarcloud.io \
        //       -Dsonar.token=${SONAR_TOKEN} \
        //       -Dsonar.sources=. \
        //       -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/*.spec.js"
        // }
        //         // Wait for the quality gate result
        //         timeout(time: 5, unit: 'MINUTES') {
        //             // waitForQualityGate abortPipeline: true
        //             script {
        //                 def qg = waitForQualityGate()
        //                     if (qg.status != 'OK') {
        //                         echo "Quality Gate failed: ${qg.status}"
        //                         echo "Reason: ${qg.conditions}"
        //                         currentBuild.result = 'FAILURE'
        //                         error "Pipeline aborted due to quality gate failure"
        //             }
        //         }
        //     }
        // }
        //  }
        // stage('Build') {
        //     steps {
        //         dir('frontend') {
        //             script {
        //                 sh 'echo "REACT_APP_API_URL=${REACT_APP_API_URL}" > .env'
        //                 sh 'docker build -t demoniiexe/microservice-frontend:"${IMAGE_TAG}" .'
        //             }
        //         }
        //     }
        // }
        // stage('Push') {
        //     steps {
        //         script {
                    
        //                 // Login to Docker Hub
        //                 sh 'docker login -u demoniiexe -p $DOCKER_PASS'
        //                 sh 'docker push demoniiexe/microservice-frontend:"${IMAGE_TAG}"'
                    
        //         }
        //     }
        // }
        // stage('EKS-setup') {
        //     steps {
        //         script {
        //             sh 'aws eks update-kubeconfig --name task-eks --region ap-south-1'
        //         }
        //     }
        // }
        // stage('Deploy') {
            
        //     steps {
        //             script {
        //                 def releaseName = "frontend"
        //                 def namespace = "default"

        //                 def isInstalled = sh(
        //                     script: "helm list -n ${namespace} -q | grep -w ${releaseName} || true",
        //                     returnStdout: true
        //                 ).trim()

        //                 if (isInstalled) {
        //                     echo "Helm release '${releaseName}' is already installed."
        //                     sh 'helm upgrade frontend frontend-helm-custom --set deployment.image.tag="${IMAGE_TAG}"'
        //                 } else {
        //                     echo "Helm release '${releaseName}' is not installed. Installing now..."
        //                     sh 'helm install frontend frontend-helm-custom --set deployment.image.tag="${IMAGE_TAG}"'
        //                 }
        //             }
        //     }   
        // }
    }
}
